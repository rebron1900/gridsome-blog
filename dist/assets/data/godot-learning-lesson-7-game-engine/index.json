{"hash":"c172d95f3caedc458b15c41bd34a3ceddae884e7","data":{"metadata":{"siteName":"只是玩玩 | JUST FUN","siteDescription":"/gridsome-blog"},"post":{"id":"63158312cf533d1c2cf29b3d","title":"Godot游戏引擎学习 第七课","content":"<!--kg-card-begin: markdown--><p>今天是圣诞节，朋友圈里热热闹闹的让我感觉全世界都再过圣诞节，回家的一路上也格外冷清，相比都去购物中心或者吃喝玩乐一条街过圣诞节去了把。</p>\n<p>今天继续学习Godot，UP今天讲的是实现很多动作游戏中的<code>残影效果</code>，对这个印象最深刻的是以前看黑客帝国时候，史密斯的那个躲子弹的残影太帅了，应该算是名场面了吧！好了，废话不多说，开干。</p>\n<h2 id>给角色添加残影</h2>\n<p>其实我之前看<a href=\"https://space.bilibili.com/58449087/?ref=1900.live\">Carotaa666</a>的直播的时候看到他说过这个思路，大概是通过计时器按一定的周期绘制一个精灵，然后再销毁掉。</p>\n<p>这里UP主的思路也是一样的，先新建一个场景名为<code>Trail</code>再里面添加一个Sprite节点，和一个<code>AnimationPlayer</code>，利用我们以前的学的，添加一个名为<code>fadeout</code>的渐隐动画，并让动画在一定时间后自我销毁，然后设置从清晰到模糊的渐变。</p>\n<p><img src=\"https://cdn.1900.live/typora/image-20201225220650839.png\" alt=\"image-20201225220650839\" loading=\"lazy\"></p>\n<p>然后给<code>Player</code>场景添加一个计时器，然后就是代码部分了。这里说到一个以后可能会经常用的函数<code>preload</code>，具体看代码，我都写了 注释了。</p>\n<pre><code class=\"language-python\"># 连接计时器的Timerout信号\t\nfunc _on_TrailTimer_timeout():\n\t# 如果角色没有移动，则不绘制影子\n\tif velocity.x == 0:\n\t\treturn\n\t\n\t# 用preload预加载我们做的那个影子场景，并实例化\n\tvar trail = preload(&quot;res://src/effects/Trail.tscn&quot;).instance()\n\t# 把它添加进父场景\n\tget_parent().add_child(trail)\n\t# 改变它在场景树中的位置到player下方\n\tget_parent().move_child(trail, get_index())\n\n\t# 下面这些属性是要从角色上读取出来复制给影子的\n\tvar properties = [\n\t\t&quot;hframes&quot;,\n\t\t&quot;vframes&quot;,\n\t\t&quot;frame&quot;,\n\t\t&quot;texture&quot;,\n\t\t&quot;global_position&quot;,\n\t\t&quot;flip_h&quot;\n\t]\n\t# 从角色身上遍历，并给与影子\n\tfor name in  properties:\n\t\ttrail.set(name, sprite.get(name))\n</code></pre>\n<h2 id=\"shader\">第一次了解Shader</h2>\n<p>这里还说了shader，什么是shader？我也是第一次接触，以前玩绝地求生的为了改变画质用过一次，不过完全不知道是什么东西；</p>\n<blockquote>\n<p>着色器（Shader）是用来实现<a href=\"https://baike.baidu.com/item/%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/22031608?ref=1900.live\">图像渲染</a>的，用来替代固定渲染管线的可编辑程序。其中Vertex Shader主要负责顶点的几何关系等的运算，Pixel Shader主要负责片源颜色等的计算。</p>\n<p>着色器替代了传统的固定渲染管线，可以实现3D图形学计算中的相关计算，由于其可编辑性，可以实现各种各样的图像效果而不用受显卡的固定渲染管线限制。</p>\n</blockquote>\n<p>应该就是可以通过编程方式改变画面展现出来的效果，比如图片原本是彩色的，你可以通过shader改变运行后展示出来的颜色为灰色。shader我看过一些godot的实现效果，只能说很强大，在实现一些特殊画面特效时非常有用，我还得多看看相关资料学习一下。</p>\n<p>我们可以在<code>Sprite</code>上找到Material，然后新建一个<code>ShaderMaterial &gt; Shader</code>，然后就可以编写着色器代码了。</p>\n<p>具体代码如下：</p>\n<pre><code># 定义shader类型，这个时固定的好像\nshader_type canvas_item;\n\n# 定义shader的外部参数，方便调试什么的，指定它的类型为hint_color，外部在设置的时候可以调用系统的取色板\nuniform vec4 tint_color: hint_color = vec4(1.0);\n\n# 这个是主入口函数，里面的内容就是在对每一个像素点的处理方式。\nvoid fragment()\n{\n\t# 在一个图片里每一个像素都有自己的坐标，这里是获取当前图片的颜色坐标\n\tvec4 col = texture(TEXTURE, UV);\n\t# 通过算法讲每个像素换算成灰色\n\tfloat grey = (col.r + col.g + col.b) / 3.0;\n\t# 这个UP说是色阶的处理，从多少过渡到多少（大概）\n\tgrey = smoothstep(0.3, 0.6, grey) * 0.4 + 0.6;\n\t# 把计算出来的颜色给与贴图\n\tCOLOR = vec4(grey * tint_color.rgb, col.a);\n}\n</code></pre>\n<p>最后效果就是这样，还挺帅的。</p>\n<p><img src=\"https://cdn.1900.live/typora/%E7%AC%AC%E4%B8%83%E8%AF%BE_trail_shader.gif\" alt=\"第七课_trail_shader\" loading=\"lazy\"></p>\n<h2 id>增加飞行敌人</h2>\n<p>这里UP果然将Slime上一些共有属性提取到Enmey上去了。苍蝇作为怪物自然也要继承自Enmey脚本，并且也更改了移动方式。并通过一个<code>Area2D</code>检测敌人的范围。</p>\n<p><img src=\"https://cdn.1900.live/typora/image-20201226004615966.png\" alt=\"image-20201226004615966\" loading=\"lazy\"></p>\n<p>但是和Slime不一样的是，这个飞行怪物是会飞的，所以移动逻辑和地形i行走的完全不一样。也不会受y轴的重力影响，所以这里代码部分改了很多。而且还有警戒区域.</p>\n<p>这里有一些代码有点一知半解</p>\n<pre><code class=\"language-python\">extends &quot;res://src/enemies/Enemy.gd&quot;\n\nvar target_posistion = null\n\nonready var player_sensor = $PlayerSensor\n\n\nfunc _process(delta):\n    if is_dead:\n        # 死后不在移动\n        velocity.x = 0\n        # 且增加增加重力影响\n        velocity.y += gravity * delta\n    else:\n        # 计算并更新目标位置\n        target_posistion = _calc_target_position()\n        if target_posistion == null:\n            # 如果没有新的目标位置就只移动到目标位置去\n            velocity = velocity.move_toward(Vector2.ZERO, acceleration * delta)\n        else:\n            # 获取自身到目标位置的向量\n            var direction = global_position.direction_to(target_posistion)\n            # 根据目标向量进行移动\n            velocity = velocity.move_toward(direction * max_speed, acceleration * delta)\n            # 转身\n            sprite.flip_h = direction.x &gt; 0\n  \nfunc _physics_process(_delta):\n    # 移动\n    velocity = move_and_slide(velocity)\n\nfunc _calc_target_position():\n    # 获得所有碰撞区内的对象数组，因为只有有些角色能和他碰撞，所以只要有数据就是游戏角色\n    var bodies = player_sensor.get_overlapping_bodies()\n    #如果有的话就更新目标位置\n    if not bodies.empty():\n        # 返回新的目标位置\n        return bodies[0].global_position + Vector2(0, 50) \n    # 这里大概意思如果离目标距离太远也不追踪了，不过不知道为什么要设置成25\n    if target_posistion != null and global_position.distance_squared_to(target_posistion) &lt; 25:\n        print(global_position.distance_squared_to(target_posistion))\n        return null\n\t\n    return target_posistion\n</code></pre>\n<p>好了，大概效果如下</p>\n<p><img src=\"https://cdn.1900.live/typora/%E7%AC%AC%E4%B8%83%E8%AF%BE_fly_enemy.gif\" alt=\"第七课_fly_enemy\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","date":"25 December 2020","path":"godot_learning_lesson_7_game_engine"}},"context":{}}