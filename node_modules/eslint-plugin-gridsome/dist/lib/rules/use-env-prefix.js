"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const minimatch_1 = __importDefault(require("minimatch"));
const utils_1 = require("../utils");
const Fs = __importStar(require("fs"));
const PREFIX = "GRIDSOME_";
const defaultOptions = [{}];
module.exports = utils_1.createRule({
    name: "use-env-prefix",
    meta: {
        docs: {
            description: "Use prefix `GRIDSOME_` when using process.env in browser",
            category: "Possible Errors",
            recommended: false,
        },
        type: "problem",
        messages: {
            useEnvPrefix: "Use `process.env.{{ addedPrefixEnv }}`.",
        },
        schema: [
            {
                type: "object",
                properties: {
                    pathsForBrowserfile: {
                        type: "array",
                        items: {
                            type: "string",
                        },
                    },
                    envPath: {
                        type: "string",
                    },
                },
            },
        ],
    },
    defaultOptions,
    create(context) {
        var _a, _b;
        const path = utils_1.getPathFromProjectRoot(context.getFilename(), process.cwd());
        const options = {
            pathsForBrowserfile: ((_a = context.options[0]) === null || _a === void 0 ? void 0 : _a.pathsForBrowserfile) || [
                "src/**/*",
            ],
            envPath: ((_b = context.options[0]) === null || _b === void 0 ? void 0 : _b.envPath) || ".env",
        };
        const isClientfile = options.pathsForBrowserfile.some((clientPath) => minimatch_1.default(path, clientPath));
        if (!Fs.existsSync(options.envPath))
            return {};
        const envSource = Fs.readFileSync(options.envPath, { encoding: "utf8" });
        const parsedEnvSource = new utils_1.Env(envSource).parse();
        return {
            "MemberExpression[object.object.name='process'][object.property.name='env']"(node) {
                if (!isClientfile)
                    return;
                if (node.property.type !== "Identifier")
                    return;
                if (node.property.name.includes(PREFIX))
                    return;
                const envName = node.property.name;
                if (parsedEnvSource.has(envName)) {
                    context.report({
                        node,
                        loc: node.loc,
                        messageId: "useEnvPrefix",
                        data: {
                            addedPrefixEnv: `${PREFIX}${envName}`,
                        },
                    });
                }
            },
        };
    },
});
