{"remainingRequest":"/home/rebron1900/developer/my-gridsome-site/node_modules/babel-loader/lib/index.js??ref--1-1!/home/rebron1900/developer/my-gridsome-site/node_modules/gridsome/app/entry.client.js","dependencies":[{"path":"/home/rebron1900/developer/my-gridsome-site/node_modules/gridsome/app/entry.client.js","mtime":1691048593084},{"path":"/home/rebron1900/developer/my-gridsome-site/node_modules/cache-loader/dist/cjs.js","mtime":1691048593101},{"path":"/home/rebron1900/developer/my-gridsome-site/node_modules/babel-loader/lib/index.js","mtime":1691048593104}],"contextDependencies":[],"result":["import \"core-js/modules/es.array.push.js\";\nimport './polyfills';\nimport Vue from 'vue';\nimport createApp, { runPlugins, runMain } from './app';\nimport config from '~/.temp/config';\nimport plugins from '~/.temp/plugins-client';\nimport linkDirective from './directives/link';\nimport imageDirective from './directives/image';\nimport { stripPathPrefix } from './utils/helpers';\nimport { isFunc, isNil } from './utils/lang';\nVue.directive('g-link', linkDirective);\nVue.directive('g-image', imageDirective);\nrunPlugins(plugins);\nrunMain();\nconst {\n  app,\n  router\n} = createApp();\nif (process.env.NODE_ENV === 'production') {\n  router.beforeEach((to, from, next) => {\n    const components = router.getMatchedComponents(to).map(c => isFunc(c) && isNil(c.cid) ? c() : c);\n    Promise.all(components).then(() => next()).catch(err => {\n      // reload page if a component failed to load\n      if (err.request && to.path !== window.location.pathname) {\n        var _config$pathPrefix;\n        const fullPathWithPrefix = ((_config$pathPrefix = config.pathPrefix) !== null && _config$pathPrefix !== void 0 ? _config$pathPrefix : '') + to.fullPath;\n        window.location.assign(fullPathWithPrefix);\n      } else {\n        next(err);\n      }\n    });\n  });\n}\n\n// TODO: remove this behavior\n// let Vue router handle internal URLs for anchors in innerHTML\ndocument.addEventListener('click', event => {\n  const $el = event.target.closest('a');\n  const {\n    hostname,\n    port\n  } = document.location;\n  if (!config.catchLinks ||\n  // disables this behavior by config settings\n  event.defaultPrevented ||\n  // disables this behavior\n  event.which !== 1 ||\n  // not a left click\n  event.metaKey || event.altKey || event.ctrlKey || event.shiftKey || $el === null ||\n  // no link clicked\n  $el.__gLink__ ||\n  // g-link component\n  $el.hostname !== hostname ||\n  // external link\n  $el.port !== port ||\n  // external link\n  /\\.[^.]+$/.test($el.pathname) ||\n  // link to a file\n  /\\b_blank\\b/i.test($el.target) // opens in new tab\n  ) return;\n  if (config.pathPrefix && !$el.pathname.startsWith(config.pathPrefix)) {\n    return; // must include pathPrefix in path\n  }\n\n  const path = stripPathPrefix($el.pathname);\n  const {\n    route,\n    location\n  } = router.resolve({\n    path: path + ($el.search || '') + decodeURI($el.hash || '')\n  });\n  if (route.name === '*') {\n    return;\n  }\n  router.push(location, () => {});\n  event.preventDefault();\n}, false);\nrouter.onError(err => {\n  console.error(err);\n});\nrouter.onReady(() => {\n  app.$mount('#app');\n});",null]}