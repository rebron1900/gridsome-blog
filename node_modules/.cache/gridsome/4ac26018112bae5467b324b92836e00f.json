{"remainingRequest":"/home/rebron1900/developer/my-gridsome-site/node_modules/babel-loader/lib/index.js??ref--1-1!/home/rebron1900/developer/my-gridsome-site/node_modules/gridsome/app/directives/link.js","dependencies":[{"path":"/home/rebron1900/developer/my-gridsome-site/node_modules/gridsome/app/directives/link.js","mtime":1691048593084},{"path":"/home/rebron1900/developer/my-gridsome-site/node_modules/cache-loader/dist/cjs.js","mtime":1691048593101},{"path":"/home/rebron1900/developer/my-gridsome-site/node_modules/babel-loader/lib/index.js","mtime":1691048593104}],"contextDependencies":[],"result":["import fetch from '../fetch';\nimport router from '../router';\nimport caniuse from '../utils/caniuse';\nimport { stripPathPrefix } from '../utils/helpers';\nimport { createObserver } from '../utils/intersectionObserver';\nconst isPreloaded = {};\nconst observer = caniuse.IntersectionObserver ? createObserver(intersectionHandler) : null;\nexport default {\n  inserted(el) {\n    observer && observer.observe(el);\n  },\n  unbind(el) {\n    observer && observer.unobserve(el);\n  }\n};\nfunction intersectionHandler({\n  intersectionRatio,\n  target\n}) {\n  if (process.isClient) {\n    if (intersectionRatio > 0) {\n      observer.unobserve(target);\n      if (document.location.hostname === target.hostname) {\n        if (isPreloaded[target.pathname]) return;else isPreloaded[target.pathname] = true;\n        const path = stripPathPrefix(target.pathname);\n        const {\n          route\n        } = router.resolve({\n          path\n        });\n        setTimeout(() => fetch(route, {\n          shouldPrefetch: true\n        }), 250);\n      }\n    }\n  }\n}",null]}