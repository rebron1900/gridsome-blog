{"hash":"0810a28e7848218696784bc8b33ad1e40c9e72dc","data":{"metadata":{"siteName":"只是玩玩 | JUST FUN","siteDescription":"Hello"},"post":{"id":"63158312cf533d1c2cf29b40","title":"Godot游戏引擎学习 课外学习：新场景 1","content":"<!--kg-card-begin: markdown--><p>第九课的时候说了，UP这周没更新视频，所以也没什么可以再看的，索性准备利用这段时间自己把之前所学巩固一下，自己动脑动手搭建一个新关卡，增加一些新的怪物和机关之类的。</p>\n<p>昨天整理了一下新关卡要增加的一些要素：</p>\n<p><img src=\"https://cdn.1900.live/typora/image-20201228213843227.png\" alt=\"image-20201228213843227\" loading=\"lazy\"></p>\n<p>今天自己动手做起来才发现自己之前学的过程中很多东西没吃透，一个很小的问题就会卡我很久，可是被好好打击了一下，昨天一直研究到今天，好在自己重新翻看之前的代码，反复翻看文档，实时打印数据，终于得以解决。</p>\n<h2 id>青蛙</h2>\n<p>今天完成的是新怪物青蛙 Frog。</p>\n<p>其实Frog和Slime的区别只有一个：一个会跳一个不会跳而已。</p>\n<p>但是因为我对<code>process</code>、<code>physics_process</code>、<code>direction</code>、<code>velocity</code>这些东西没有真正理解而毫无头绪。</p>\n<p>其实两个process都只是负责更新画面而已，数据没发生变动他们便按照原来的数据更新画面，数据发生了变动，这两个主更新程序便会按新的数据来更新画面。</p>\n<p>然后你只需要在你想要更新画面的函数里，比如：输入，定时器，怪物死亡时等等逻辑函数里更新画面的数据，如：位置，状态，动画等等。因为数据发生了变化，所以主更新函数便会按新的数据绘制画面。</p>\n<p>新建一个继承场景，添加新的精灵和一个计时器：</p>\n<p><img src=\"https://cdn.1900.live/typora/image-20201228220744188.png\" alt=\"image-20201228220744188\" loading=\"lazy\"></p>\n<p>编写代码：</p>\n<pre><code class=\"language-python\">extends &quot;res://src/enemies/Enemy.gd&quot;\n\n# 是不是跳跃状态\nexport var is_jump = true\n\n# 跳跃高度\nvar jump_hight = -600\n# 跳跃距离\nvar jump_distance = 300\n\nfunc _physics_process(_delta):\n\tvelocity = move_and_slide(velocity, Vector2.UP)\n\t# 每一个物理帧检查怪物是不是碰到墙了\n\tvar was_on_wall = is_on_wall()\n\t# 青蛙是不是在地板上\n\tvar was_on_floor = is_on_floor()\n\n\t# 如果落地了就不再移动了，并更改状态为未跳跃，等待下次跳跃\n\tif was_on_floor:\n\t\tis_jump = false\n\t\tvelocity.x = 0\n\n\t# 如果碰到墙就转身\n\tif is_on_wall():\n\t\tdirection *= -1\n\nfunc _process(delta):\n\t# 添加重力\n\tvelocity.y += gravity * delta\n\nfunc _on_Timer_timeout():\n\t# 每2秒跳跃一次\n\t# 如果在非跳跃状态才给值\n\tif (not is_jump):\n\t\t# 这里有个概念，所有的图像更新有会在process和physics进行，\n\t\t# 像怪物跳跃这种没有玩家控制的周期性操作可以在通过Timer实现\n\t\t# 每一个计时器周期更新一次移动数据\n\t\tvelocity.y = jump_hight\n\t\t# direction是物体的移动方向的向量值，之前一直没有真正搞明白\n\t\tvelocity.x = jump_distance * direction\n\t\t# 播放跳跃动画\n\t\tanimation_player.play(&quot;jump&quot;)\n\t\n\t# 如果不是在idle状态则可以进行转身\n\tif velocity.x != 0:\n\t\t# 进行转身\n\t\tsprite.flip_h = velocity.x &gt; 0\n</code></pre>\n<p>完成后还是很开心的，这些代码算是我自己真正理解后写下来的第一段代码，实现的第一个功能。算是我游戏开发正真意义上迈出的第一个小步。</p>\n<p>加油。</p>\n<h2 id>最终效果</h2>\n<p><img src=\"https://cdn.1900.live/typora/%E5%AD%A6%E4%B9%A0%E5%B7%A9%E5%9B%BA_frog-1609165012138.gif\" alt=\"学习巩固_frog\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->","date":"28 December 2020","path":"godot_learning_how_to_consolidate_1_game_engine"}},"context":{}}