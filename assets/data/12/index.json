{"hash":"0810a28e7848218696784bc8b33ad1e40c9e72dc","data":{"metadata":{"siteName":"只是玩玩 | JUST FUN","siteDescription":"Hello"},"allGhostPost":{"pageInfo":{"totalPages":64,"currentPage":12},"edges":[{"node":{"id":"63158312cf533d1c2cf29b45","title":"节气·大寒","reading_time":0,"excerpt":null,"created_at":"Jan 21 2021","slug":"solar_terms_it_is"}},{"node":{"id":"63158312cf533d1c2cf29b44","title":"节气·小寒","reading_time":0,"excerpt":"小寒·这几天心情挺复杂","created_at":"Jan 5 2021","slug":"solar_terms"}},{"node":{"id":"63158312cf533d1c2cf29b43","title":"又到了这个时候","reading_time":5,"excerpt":"今年发生发了很多我们不想发生的事情，也让今年变的和我经历过的每一年都不一样。但是日子还是安安稳稳的走了下了，疫情平复，也没有发生世界大战，但是路上的人们带上了口罩，华为开始被国外打压，一切虽然没有大的变化，但是我们的生活却还算安稳平静。\n\n去年这个时候我倒是没发什么宏愿希望今年如何如何，不过回头过去看自己写的文字却是能发现自己的成长的，就像我现在写的这些东西，明年的我再来看也许又会有不样的感受。\n\n现在的我依旧还在成长，虽然有些方面还是做的不好，依旧没有很好的分清楚私人生活和工作，谈了女朋友，现在甚至还想自己写个游戏。\n\n人真是很奇怪的生物，往往都是知道自己的缺点、弱点，但是这些东西迸发出来的时候每个人的抵抗程度却都完全不一样，意志力影响着我们的决策。我现在真的很想让自己把工作和生活分开，工作上面自己像个懒散的豪猪，我工作做的不认真做的不好，别人也不大能管的到我，毕竟我自己就是领导，家里人说我的毛病我便竖起尖刺张牙舞爪，虽然心里知道都说得对，但是一受到指责便控制不住自己。这让我得工作懒懒散散，下面的员工颇有微词，不过也无可奈何。\n\n我是不是还没抓住要点？心态没有摆正？我想是吧...，典","created_at":"Dec 31 2020","slug":"you-dao-liao-zhe-ge-shi-hou-2"}},{"node":{"id":"63158312cf533d1c2cf29b42","title":"Godot游戏引擎学习 课外学习：新场景 3","reading_time":3,"excerpt":"今天继续完成之前指定的任务，基本上算是全部完成了\n\n\n\n\n\n今天完成了所有机关部分，分别为顶部尖刺，上下飞轮，弹簧垫。\n\n\n其实所有的机关我应该做个父类的，自己偷懒了，没有去实践父脚本这个东西。不过好在也算是全部实现了，基本上没啥问题了。\n\n\n\n顶部尖刺\n\n\n利用Area2D场景来做碰撞检测，因为尖刺是图块形式，而且设置在场景中后是不规则的形状，所以碰撞检测节点不在使用CollisionShape2D了，这里使用的ColiisisonPolygon，这个节点可以通过点线来设置不规则的碰撞区域，用在这里刚刚好。\n\n\n\n\n\n\n上下飞轮\n\n\n这里用到了之前学移动平台时候的知识，主要原理是利用了AnimationPlayer、Path2D、Path2dFollow、RemoteTransform2D这几个组件。RemoteTransform记录当前PathFollow2D的路径，并更新给Sprite，再利用AnimationPlayer来PathFollow2D的路径更新Sprite的位置，RemoteTransForm主要是同步的作用。\n\n\n刚刚做的时候都忘记之前是怎么弄的了，仔细看了下Re","created_at":"Dec 30 2020","slug":"godot_game_engine_extracurricular_learning-_new_scenario_3"}},{"node":{"id":"63158312cf533d1c2cf29b41","title":"Godot游戏引擎学习 课外学习：新场景 2","reading_time":2,"excerpt":"新怪物：飞鱼\n\n\n做了一个从屏幕右侧往玩家方向无视碰撞快速飞行的飞鱼怪物，并让拓展了之前写的怪物笼场景，可以让怪物随机生成。\n\n\n随机效果是通过获取游戏场景的高度并乘以一个随机生成的小数达到随机效果，并设置了外部变量让玩家可以控制是否随机生成，且增加了怪物数量的上限\n\n\n不过目前随机效果不太理想，之后可能要进行改进，设置成固定区域生成，而且飞鱼飞出屏幕之外后还需要让它自我销毁避免占用资源。\n\n\n具体代码如下：\n\n\nextends Position2D\n\n# 让外部可以设置打包场景\nexport var enemy_scene: PackedScene\n# 刷新速度\nexport var interval = 1.0\n# 怪物上限\nexport var max_enmey = 5\n# 是否随机\nexport var rand_position = false\n\n#定时器\nonready var timer =$Timer\n# 初始怪物数量统计\nvar enemy_count = 0\n\nfunc _ready():\n\t# 如果设置了打包场景\n\tif enemy_scene:\n\t\t# 开始计","created_at":"Dec 29 2020","slug":"godot_game_engine_extracurricular_learning-__new_scenario_2"}},{"node":{"id":"63158312cf533d1c2cf29b40","title":"Godot游戏引擎学习 课外学习：新场景 1","reading_time":3,"excerpt":"第九课的时候说了，UP这周没更新视频，所以也没什么可以再看的，索性准备利用这段时间自己把之前所学巩固一下，自己动脑动手搭建一个新关卡，增加一些新的怪物和机关之类的。\n\n\n昨天整理了一下新关卡要增加的一些要素：\n\n\n\n\n\n今天自己动手做起来才发现自己之前学的过程中很多东西没吃透，一个很小的问题就会卡我很久，可是被好好打击了一下，昨天一直研究到今天，好在自己重新翻看之前的代码，反复翻看文档，实时打印数据，终于得以解决。\n\n\n\n青蛙\n\n\n今天完成的是新怪物青蛙 Frog。\n\n\n其实Frog和Slime的区别只有一个：一个会跳一个不会跳而已。\n\n\n但是因为我对process、physics_process、direction、velocity这些东西没有真正理解而毫无头绪。\n\n\n其实两个process都只是负责更新画面而已，数据没发生变动他们便按照原来的数据更新画面，数据发生了变动，这两个主更新程序便会按新的数据来更新画面。\n\n\n然后你只需要在你想要更新画面的函数里，比如：输入，定时器，怪物死亡时等等逻辑函数里更新画面的数据，如：位置，状态，动画等等。因为数据发生了变化，所以主更新函数便会按新","created_at":"Dec 28 2020","slug":"godot_learning_how_to_consolidate_1_game_engine"}},{"node":{"id":"63158312cf533d1c2cf29b3f","title":"Godot游戏引擎学习 第九课","reading_time":7,"excerpt":"再次学习Shader\n\n\n这里先吐槽一句，以前玩全没接触过，在没有概念的情况下看待未知的事物的感觉真不好。跟着UP主把代码写出来效果实现后却对这些参数函数的意义完全不懂。\n\n\n所以我索性上Godot的官方文档里重新认真大概了解一下Shader是什么东西，以下写的东西都是在Godot里的情况\n\n\n\n\n\n着色器是在图形处理器上运行的独特程序。它们用于指定如何获取网格数据(顶点位置、颜色、法线等等)然后把它们绘制到屏幕上。着色器并不像普通程序那样处理信息，因为它们经过了优化，可以在图形处理器上运行。其结果是，着色器在运行后不会保留数据；它们把最后一种颜色输出到屏幕上，然后继续。因此，无法访问着色器上次运行时的颜色输出。\n\n\n\n首先是Shader的类型，一个shader着色器开头必须定义它的类型，官方给了三种，分别是：\n\n\n 1. Spatial：用于3d渲染\n 2. canvas_item：用于2D渲染\n 3. particles：用于粒子系统\n\n\n定义完Shader类型后要写一个主入口函数，也分为三种\n\n\n 1. vertex()：运行在所有网格的定点上，并设置他们的位置及部分其他每个顶点","created_at":"Dec 27 2020","slug":"godot_game_engine_to_learn_lesson_nine"}},{"node":{"id":"63158312cf533d1c2cf29b3e","title":"Godot游戏引擎学习 第八课","reading_time":4,"excerpt":"增加音乐和音效\n\n\n其实原理差不多，之前学习制作金币的时候当时是添加过音效的，不过当时用的是AnimationPlayer来实现，通过方法轨道调用AudioStreamPlayer的play方法来播放音乐。\n\n\n我刚开始的时候准备不去跟着UP的视频，自己动手来做的。但是自己脑抽了折腾了好久不弄不成功，而且最后莫名奇妙的发现游戏里Slime不见了...，音乐也没播放成功\n\n\n我起码检查了二十分钟发现原来是当时我写Slime的动画的时候头来的walk状态没给export属性赋值，导致动画自动播放后这些属性直接变为死亡后的状态了，恰好里面更改过Visible属性，导致精灵直接消失不见了。\n\n\n不过后来思路理清楚了倒是很快就做了，这里就不细说了，都是之前的东西。\n\n\n另外还增加了场景BGM后因为角色死了我们调用了场景重置函数，所以这里UP说了一个场景树的概念，我们的主场景为Wolrd,只要一重置整个场景树就会恢复成初始化状态，如果想要实现BGM在角色死掉的时候不断掉就要重新添加一个额外的和World同级的节点。\n\n\n这里就要用到项目 > 项目设置 > 自动加载这个功能，就是把一个场景单独加载成","created_at":"Dec 26 2020","slug":"godot_learning_lesson_8_game_engine"}},{"node":{"id":"63158312cf533d1c2cf29b3d","title":"Godot游戏引擎学习 第七课","reading_time":6,"excerpt":"今天是圣诞节，朋友圈里热热闹闹的让我感觉全世界都再过圣诞节，回家的一路上也格外冷清，相比都去购物中心或者吃喝玩乐一条街过圣诞节去了把。\n\n\n今天继续学习Godot，UP今天讲的是实现很多动作游戏中的残影效果，对这个印象最深刻的是以前看黑客帝国时候，史密斯的那个躲子弹的残影太帅了，应该算是名场面了吧！好了，废话不多说，开干。\n\n\n\n给角色添加残影\n\n\n其实我之前看Carotaa666的直播的时候看到他说过这个思路，大概是通过计时器按一定的周期绘制一个精灵，然后再销毁掉。\n\n\n这里UP主的思路也是一样的，先新建一个场景名为Trail再里面添加一个Sprite节点，和一个AnimationPlayer，利用我们以前的学的，添加一个名为fadeout的渐隐动画，并让动画在一定时间后自我销毁，然后设置从清晰到模糊的渐变。\n\n\n\n\n\n然后给Player场景添加一个计时器，然后就是代码部分了。这里说到一个以后可能会经常用的函数preload，具体看代码，我都写了 注释了。\n\n\n# 连接计时器的Timerout信号\t\nfunc _on_TrailTimer_timeout():\n\t# 如果角色没有移动","created_at":"Dec 25 2020","slug":"godot_learning_lesson_7_game_engine"}},{"node":{"id":"63158312cf533d1c2cf29b3c","title":"无聊实现了个好玩的东西","reading_time":4,"excerpt":"最近总店隔壁的竞争对手的喇叭经常叫唤说给顾客优惠了多少钱之类的，他们那个收银软件和我们用的是同一家公司的，这个叫唤的程序据我跟软件公司的人了解性能很低而且经常读不出来，算是比较鸡肋的功能，他们基本上不安装。\n\n不过我之前也问过他们有没有其他方案，他们说暂时没有。\n\n恰好我最近不是换了评论系统twikoo么，这个评论系统有个很有意思功能就是利用webhook在收到评论的第一时间给指定的平台发送消息，twikoo开通了微信和QQ的推送，比传统邮件提醒快很多，效果看下\n\n我看了下服务平台上的调用，说是一种叫webhook的功能，有点类似我们以前学C#的时候做web服务。大概思路就是一直监听某个端口的请求，根据收到密钥对消息进行判断，然后再分发给对应的用户。\n\n我当时突发奇想，虽然我改不了我们公司的ERP系统，但是这个系统提供了一个数据库扩展触发器的功能，对应表进行修改的时候就可以触发触发器，那么我是不是可以通过SQL来执行HTTP请求？之前的系统重度，病毒甚至可以通过SQL入侵我的电脑进行任意操作，没道理我发个请求都不行吧？\n\n一想好就开始百度，没费多少功夫就找到了SQL发送HTTP请求的存","created_at":"Dec 25 2020","slug":"boring_to_implement_fun"}}]}},"context":{}}